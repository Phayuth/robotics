import os
import sys
wd = os.path.abspath(os.getcwd())
sys.path.append(str(wd))

import numpy as np
from copsim.arm_api import UR5eArmCoppeliaSimAPI
import time 

pathArray = np.array([[-0.4831071, 0.0514872, -0.4639085, -0.2666863, 1.5259414, 0.0000000], [-0.5586294, -0.1750165, -0.5203916, -0.2223494, 1.5765563, 0.1589794],
                      [-0.6527066, -0.1316107, -0.5903881, -0.0727589, 1.5125413, 0.3778187], [-0.6191012, -0.1732084, -0.6953801, 0.0770846, 1.3058748, 0.4824749],
                      [-0.6525155, -0.0043750, -0.7590095, 0.0256255, 1.1035960, 0.5954587], [-0.6220110, -0.1319450, -0.9280019, 0.0334071, 0.9004922, 0.6495439],
                      [-0.5650459, -0.0516826, -1.0775402, 0.0241605, 0.7200794, 0.8086570], [-0.6423592, -0.1272435, -0.9640069, 0.1936160, 0.5341623, 0.8549496],
                      [-0.6757667, -0.0488557, -1.0008803, 0.4666374, 0.4944516, 0.7824097], [-0.8289721, -0.0701928, -1.1891779, 0.5576380, 0.6394247, 0.8187217],
                      [-0.9332841, -0.1196766, -1.2990830, 0.6762730, 0.4819240, 0.6583768], [-0.9039973, -0.1212997, -1.4395539, 0.8621484, 0.3344253, 0.5439127],
                      [-0.7413957, -0.2636892, -1.5147516, 1.0121855, 0.2372141, 0.6192129], [-0.5463474, -0.1897013, -1.6109908, 1.1600197, 0.2355175, 0.7431571],
                      [-0.3496264, -0.0522738, -1.6833475, 1.2487445, 0.1296605, 0.6531504], [-0.2299080, -0.1841171, -1.7537270, 1.3589362, 0.1654926, 0.8529139],
                      [-0.1403695, -0.4164103, -1.8408963, 1.3716500, 0.2060994, 0.9893460], [-0.2332071, -0.5936512, -1.8870399, 1.4552834, 0.0195072, 1.0669760],
                      [-0.2300239, -1.4116396, -1.8819211, 1.1254821, 0.3495971, 1.3864237], [-0.0187657, -1.5084414, -1.8875910, 1.5262295, 0.8092253, 1.9199706],
                      [0.0066601, -1.5512746, -1.6101097, 1.4239284, 0.8035201, 1.9149790], [-0.1446207, -1.9825488, -0.8208647, 1.4516564, 1.1849712, 1.8480887],
                      [-0.6108302, -1.9348916, -1.0109171, 0.8598719, 1.4121891, 1.8276713], [-0.7901841, -1.9069933, -1.0716456, 0.6924882, 1.3664749, 1.6751629],
                      [-1.2537752, -2.1546411, -0.7841795, 0.0328592, 1.7392993, 1.6518787], [-1.1640728, -1.9348487, -0.8201570, 0.2030532, 2.1956809, 1.3064180],
                      [-1.0541359, -2.2773923, -0.1245015, -0.1888635, 2.1030945, 1.2355536]])



{'Planner Name': 'RRT Star', 'Parameters': {'eta': 0.2, 'subEta': 0.05, 'Max Iteration': 5000, 'Rewire Radius': 0.5}, 'Number of Node': 2176, 'Total Planning Time': 2584.215290045, 'KCD Time Spend': 2556.313923001, 'Planning Time Only': 27.901367043999926, 'Number of Collision Check': 148249, 'Average KCD Time': 0.017243380548948056, 'Cost Graph': [(2018, 4.2512349233857885), (2505, 3.8823243562621483), (3507, 3.4893877346799402), (4225, 2.633495579865748)]}
{'Planner Name': 'RRT Star', 'Parameters': {'eta': 0.2, 'subEta': 0.05, 'Max Iteration': 5000, 'Rewire Radius': 0.5}, 'Number of Node': 2024, 'Total Planning Time': 2672.2283017160003, 'KCD Time Spend': 2644.8115627270004, 'Planning Time Only': 27.416738988999896, 'Number of Collision Check': 137569, 'Average KCD Time': 0.0192253455555176, 'Cost Graph': [(1963, 4.998507305360415), (2008, 4.926189920950228), (3235, 4.706785821995885), (3331, 4.690438558958674), (3607, 3.315951044287265)]}
{'Planner Name': 'Informed RRT Star NewMod', 'Parameters': {'eta': 0.2, 'subEta': 0.05, 'Max Iteration': 5000, 'Rewire Radius': 0.5}, 'Number of Node': 3749, 'Total Planning Time': 2705.9376362390003, 'KCD Time Spend': 2653.7673584920003, 'Planning Time Only': 52.170277747, 'Number of Collision Check': 145420, 'Average KCD Time': 0.018248984723504336, 'Cost Graph': [(1963, 4.998507305360415), (2087, 4.978362398486349), (2112, 4.7492926062879155), (2298, 4.479455172540585), (2359, 4.1455940382697545), (2374, 3.2455711202666735), (2465, 3.235568040883372), (2655, 3.2051241294718134), (2735, 3.194887507095367), (2792, 3.1884886870967457), (2849, 3.1630843891248803), (2854, 3.159527792242954), (2974, 3.144438220088174), (3052, 3.14004932681058), (3072, 3.1359803527219645)]}
{'Planner Name': 'Proposed', 'Parameters': {'eta': 0.2, 'subEta': 0.05, 'Max Iteration': 5000, 'Rewire Radius': 0.5}, 'Number of Node': 18, 'Total Planning Time': 1189.535497654, 'KCD Time Spend': 1105.2583427020002, 'Planning Time Only': 84.27715495199982, 'Number of Collision Check': 62919, 'Average KCD Time': 0.017566368548482973, 'Cost Graph': [(6, 3.060654957039304)]}
{'Planner Name': 'Informed RRT Star NewMod', 'Parameters': {'eta': 0.3, 'subEta': 0.05, 'Max Iteration': 2000, 'Rewire Radius': 0.5}, 'Number of Node': 1944, 'Total Planning Time': 3021.8610151020002, 'KCD Time Spend': 3003.001781231, 'Planning Time Only': 18.859233871000015, 'Number of Collision Check': 160293, 'Average KCD Time': 0.01873445366442078, 'Cost Graph': [(41, 3.8865852931221476)]}

[-0.00680678 -0.10402162 -0.05986479  0.10611602  0.02932153 -0.05986479]
[-0.17498055 -0.19584984 -0.24127577  0.11260115  0.17191593 -0.0598962 ] 
[-0.33829331 -0.43804178 -0.56917319 -0.01237059  0.27132088 -0.16652974] 
[-0.33199506 -0.59094074 -0.71948546 -0.14552028  0.37320614 -0.2925417 ] 
[-0.68927399 -0.69681341 -0.81629521 -0.09467394  0.38986462 -0.45615326] 
[-0.86116716 -0.64265464 -0.95609087  0.05480456  0.4854821  -0.53671516] 
[-1.01276666 -0.71465904 -1.12341449  0.07323656  0.65409336 -0.46553744] 
[-1.16436617 -0.78666344 -1.29073811  0.09166856  0.82270461 -0.39435972] 
[-1.31596567 -0.85866784 -1.45806173  0.11010056  0.99131587 -0.323182  ] 
[-1.46756518 -0.93067224 -1.62538535  0.12853256  1.15992713 -0.25200428] 
[-1.87605441 -1.12469017 -2.07624368  0.17819812  1.61425503 -0.06021386]
[-1.87587988 -1.29782683 -1.93836267  0.21066124  1.65806279 -0.06056293]


path = [Node(pathArray[i, 0], pathArray[i, 1], pathArray[i, 2], pathArray[i, 3], pathArray[i, 4], pathArray[i, 5]) for i in range(pathArray.shape[0])]

armState = UR5eStateArmCoppeliaSimAPI()
armStateVirtual = UR5eVirtualArmCoppeliaSimAPI()
armState.start_sim()
pathX, pathY, pathZ, pathP, pathQ, pathR = extract_path_class_6d(path)
pathX = np.array(pathX)
pathY = np.array(pathY)
pathZ = np.array(pathZ)
pathP = np.array(pathP)
pathQ = np.array(pathQ)
pathR = np.array(pathR)

for i in range(len(pathX)):
    jointVal = np.array([pathX[i], pathY[i], pathZ[i], pathP[i], pathQ[i], pathR[i]]).reshape(6, 1)
    armStateVirtual.set_joint_value(jointVal)
    time.sleep(0.5)
armState.stop_sim()